1)
class Solution:
    def mergeAlternately(self,word1:str,word2:str):
        merge_string=[]
        i,j=0,0
        while i< len(word1) and j< len(word2):
            merge_string.append(word1[i])
            merge_string.append(word2[j])
            i+=1
            j+=1
        
        while i< len(word1):
            merge_string.append(word1[i])
            i+=1
        while j< len(word2):
            merge_string.append(word2[j])
            j+=1
        
        return ''.join(merge_string)


S = Solution()
S.mergeAlternately('ab','pqrs')


2) 

from itertools import zip_longest

class Solution:
    def mergeAlternately(self, word1: str, word2: str):
        merged = ""
        for a, b in zip_longest(word1, word2, fillvalue=""):
            merged += a + b
        return merged

S = Solution()
print(S.mergeAlternately('ab', 'pqrs'))  # Output: apbqrs
print(S.mergeAlternately('abc', 'pqr')) # Output: apbqcr
